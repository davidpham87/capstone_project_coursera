runApp()
library('shiny')
setwd("~/Dropbox/VizD3/snf_researcher/snf_apps")
runApp()
runApp()
install.packages('rgdal')
runApp()
setwd("~/Dropbox/VizD3/snf_researcher/snf_apps")
library('shiny')
runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library('data.table')
load('data/dat_agg_clean.RData') # load list dat.agg
library(rgdal)
library(ggplot2)
library(maptools)
gpclibPermit()
world.map <- readOGR(dsn="data", layer="TM_WORLD_BORDERS_SIMPL-0.3")
world.ggmap <- fortify(world.map, region = "ISO3")
n <- length(unique(world.ggmap$id))
df <- data.frame(iso3 = unique(world.ggmap$id), growth = 0)
dat.lyb <- dat.agg[[1]]
dat.l <- dat.lb[, list(N = sum(N)), by='iso3'][order(N)]
load('data/dat_agg_clean.RData') # load list dat.agg
dat.lyb <- dat.agg[[1]]
dat.l <- dat.lb[, list(N = sum(N)), by='iso3'][order(N)]
dat.l <- dat.lyb[, list(N = sum(N)), by='iso3'][order(N)]
world_map_void <- ggplot(df, aes(map_id = iso3)) +
geom_map(map = world.ggmap, alpha = 0.4, fill = 'grey') +
expand_limits(x = world.ggmap$long, y = world.ggmap$lat) +
scale_fill_gradientn(
colours = brewer.pal(9, 'Blues')[c(-1,-2)], guide = "colorbar",
name = 'Log of Number\nof Project') +
labs(y = NULL, x = NULL) + theme_bw() +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank())
library('RColorBrewer')
world_map_void <- ggplot(df, aes(map_id = iso3)) +
geom_map(map = world.ggmap, alpha = 0.4, fill = 'grey') +
expand_limits(x = world.ggmap$long, y = world.ggmap$lat) +
scale_fill_gradientn(
colours = brewer.pal(9, 'Blues')[c(-1,-2)], guide = "colorbar",
name = 'Log of Number\nof Project') +
labs(y = NULL, x = NULL) + theme_bw() +
theme(axis.line = element_blank(), axis.ticks = element_blank(),
axis.text = element_blank())
world_map_void
world_map_void + geom_map(data = dat.l, aes(fill = log(N)), map = world.ggmap)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat.base <- dat[, .N, by = 'project_year,base_disc_name']
ggplot(dat.base, aes(factor(project_year), N)) +
geom_bar(aes(fill = base_disc_name), stat='identity', position = 'dodge') +
scale_fill_brewer(palette = 'RdYlBu') +
labs('title' = 'Project by Year and Disciplin')
load('data/dat_clean.RData') # load dat
load('data/dat_agg_clean.RData') # load list dat.agg
dat.base <- dat[, .N, by = 'project_year,base_disc_name']
ggplot(dat.base, aes(factor(project_year), N)) +
geom_bar(aes(fill = base_disc_name), stat='identity', position = 'dodge') +
scale_fill_brewer(palette = 'RdYlBu') +
labs('title' = 'Project by Year and Disciplin')
dat.lb <- dat.agg[[2]]
dat.l <- dat.lb[, list(N = sum(N)), by='iso3'][order(N)]
ggplot(subset(dat.l, N > 77), aes(reorder(iso3, N), N)) +
geom_bar(stat='identity', fill ='steelblue') + coord_flip() +
geom_text(aes(y = 5, label = N), size = 4,  hjust = 0, color = 'white') +
labs(title = '10 Most Visited Countries', x = 'Country')
dat.lyb <- dat.agg[[1]]
dat.sub <- subset(dat.lyb, iso3 %in% most_country)
dat.sub[, iso3 := factor(iso3, levels = rev(most_country))]
ggplot(dat.sub) + facet_wrap(~iso3) +
geom_line(aes(project_year, N, color=factor(base_disciplin))) +
scale_color_discrete(name = 'Disciplin',
label = c('Social Science', 'Base Sciences', 'Biology/Medecine')) +
labs(x='project year', title='Evolution of the Number of project by country')
runApp()
runApp()
runApp()
library(shinyapps)
deployApp()
deployApp()
deployApp()
deployApp()
library('shiny')
runApp()
runApp()
library('shinyapss')
library('shinyaps')
library('shinyapps')
deployApp()
deployApp(upload=F)
runApp()
deployApp(upload=F)
deployApp()
deployApp()
runApp()
library('shiny')
setwd("~/Dropbox/coursera_capstone_project/shiny_apps")
runApp()
runApp()
runApp()
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
source('~/Dropbox/coursera_capstone_project/4_prediction.R')
source('~/Dropbox/coursera_capstone_project/4_prediction.R')
CleanInputString <- function(s){
s <- tolower(s)
s <- gsub("(\\w)-(\\w)", "\\1\1dd\\2", s)
s <- gsub("(\\w)'(\\w)", "\\1\2dd\\2", s)
s <- gsub("[[:punct:]]+", "", s)
s <- gsub("\1dd", "-", s, fixed = TRUE)
s <- gsub("\2dd", "'", s, fixed = TRUE)
return(s)
}
##' Word Prediction
##'
##' Predict the following words by looking up on the table and provide
##' the table of words with the adjusted probabilities
##' @title Predict next word
##' @param s, a string and we try to predict the next word
##' @param prob.adj.init a list of adjusted probability
##' @return a table with words
##' @author David
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
out.res[, mean(cond.prob), by=predict.word]
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
PredictNextWord(s, prob.adj)
s <- 'I expect to write a '
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
out.res <- out.res[, mean(cond.prob), by=predict.word]
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
s <- 'I expect to write a '
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
print(out.res)
out.res <- out.res[, mean(cond.prob), by=predict.word]
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
print(out.res)
out.res <- out.res[, mean(cond.prob), by='predict.word']
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
s <- 'I expect to write a '
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
print(out.res)
out.res <- out.res[, list(cond.prob=mean(cond.prob)), by='predict.word']
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
print(out.res)
out.res <- out.res[, list(cond.prob=mean(cond.prob)), by=predict.word]
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
s <- 'I expect to write a '
PredictNextWord(s, prob.adj)
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=lapply(strsplit(s, ' '), '[', idx.l),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
# print(out.res)
# out.res <- out.res[, list(cond.prob=mean(cond.prob)), by=predict.word]
## rownames(out.res) <- NULL
return(out.res)
}
out.res <- PredictNextWord(s, prob.adj)
out.res
out.res[, sum(cond.prop), by='predict.word']
setnames(out.res, predict.word, predictWord)
setnames(out.res, 'predict.word', 'predictWord')
out.res[, sum(cond.prob), by='predictWord']
out.res[, predictWord]
out.res[, unlist(predictWord)]
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word=unlist(lapply(strsplit(s, ' '), '[', idx.l)),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
# print(out.res)
# out.res <- out.res[, list(cond.prob=mean(cond.prob)), by=predict.word]
## rownames(out.res) <- NULL
return(out.res)
}
out.res <- PredictNextWord(s, prob.adj)
out.res[, sum(cond.prob), by='predict.word']
out.res
out.res[, sum(cond.prop), by='predict.word']
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word =
unlist(lapply(strsplit(s, ' '), '[', idx.l)),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
# print(out.res)
out.res <- out.res[, list(cond.prop=mean(cond.prop)), by=predict.word]
## rownames(out.res) <- NULL
return(out.res)
}
PredictNextWord <- function(s, prob.adj.init){
s <- CleanInputString(s)
s.l <- strsplit(tolower(s), ' ')[[1]]
n <- min(length(s.l), 2)
prob.adj <- lapply(prob.adj.init, function(x) copy(x))
## Predict usual n-gram
idxs <- list((-(n-1):0) + length(s.l), (-2*(n-1):0) + length(s.l))
out.l <- list()
i <- 1 # bad
for(idx in idxs){
s. <- paste0(s.l[idx], collapse=' ')
res <- prob.adj$n3[s.][order(-cond.prop)]
idx.l <- 3
if (any(is.na(res$s))){
s.2 <- paste0(s.l[idx[-1]], collapse=' ')
res <- prob.adj$n2[s.2][order(-cond.prop)]
idx.l <- 2
}
out.res <- res[, list(predict.word =
unlist(lapply(strsplit(s, ' '), '[', idx.l)),
cond.prop)]
out.l[[i]] <- head(data.frame(out.res), 10)
i <- i + 1
}
## Predict with skipngram
out.res <- na.omit(rbindlist(out.l))
out.res <- data.table(out.res)
# print(out.res)
out.res <- out.res[, list(cond.prop=mean(cond.prop)), by=predict.word]
## rownames(out.res) <- NULL
return(data.frame(out.res))
}
PredictNextWord(s, prob.adj)
s <- "You're the reason why I smile everyday. Can you follow me please? It would mean the"
PredictNextWord(s, prob.adj)
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
shiny::runApp('~/Dropbox/coursera_capstone_project/shiny_apps')
deployApp()
library(shinyApps)
library(shinyApp)
library(shinyapps)
deployApp()
getwd()
